// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  user_id,
  title,
  body,
  tags
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, user_id, title, body, tags, update_at, create_at
`

type CreatePostParams struct {
	UserID int64
	Title  string
	Body   sql.NullString
	Tags   sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Body,
		arg.Tags,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Tags,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  password,
  name,
  bio,
  update_at
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, email, password, name, bio, update_at, create_at
`

type CreateUserParams struct {
	Email    string
	Password string
	Name     string
	Bio      sql.NullString
	UpdateAt sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Bio,
		arg.UpdateAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const deletePosts = `-- name: DeletePosts :exec
DELETE FROM posts
WHERE id = ?
`

func (q *Queries) DeletePosts(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePosts, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, title, body, tags, update_at, create_at FROM posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Tags,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, name, bio, update_at, create_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, bio, update_at, create_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const listPostByUserID = `-- name: ListPostByUserID :many
SELECT id, user_id, title, body, tags, update_at, create_at FROM posts
WHERE user_id = ?
ORDER BY name
`

func (q *Queries) ListPostByUserID(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Tags,
			&i.UpdateAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, name, bio, update_at, create_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.Bio,
			&i.UpdateAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts SET
title = ?,
body = ?,
tags = ?,
update_at = ?
WHERE id = ?
RETURNING id, user_id, title, body, tags, update_at, create_at
`

type UpdatePostParams struct {
	Title    string
	Body     sql.NullString
	Tags     sql.NullString
	UpdateAt sql.NullString
	ID       int64
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Body,
		arg.Tags,
		arg.UpdateAt,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
email = ?,
name = ?,
password = ?,
bio = ?,
update_at = ?
WHERE id = ?
RETURNING id, email, password, name, bio, update_at, create_at
`

type UpdateUserParams struct {
	Email    string
	Name     string
	Password string
	Bio      sql.NullString
	UpdateAt sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Bio,
		arg.UpdateAt,
		arg.ID,
	)
	return err
}
